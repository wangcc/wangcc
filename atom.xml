<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Eric Wang]]></title>
  <subtitle><![CDATA[患中二病的测试开发攻城狮]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://eric-is.me//"/>
  <updated>2015-08-11T00:16:26.000Z</updated>
  <id>http://eric-is.me//</id>
  
  <author>
    <name><![CDATA[Eric Wang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Mac 笔记]]></title>
    <link href="http://eric-is.me/2015/08/11/mac-help/"/>
    <id>http://eric-is.me/2015/08/11/mac-help/</id>
    <published>2015-08-10T23:48:35.000Z</published>
    <updated>2015-08-11T00:16:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本文只是对自己遇到的一些问题的定期维护笔记，并非高大上教程</p>
</blockquote>
<h1 id="开发环境">开发环境</h1><h3 id="Homebrew"><a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a></h3><p>类似linux下的包管理工具，能够帮助我们快速的安装第三方库和程序</p>
<p>安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="Python3"><a href="https://www.python.org/" target="_blank" rel="external">Python3</a></h3><p>3.x 版本的python开发环境，官网有提供pkg的安装包直接安装即可，但是升级和维护都不方便，这边记录的是使用homebrew的安装方式</p>
<ol>
<li><code>ls /usr/include/zlib.h</code> 如果发现文件不存在，请先安装<code>xcode</code>并运行<code>xcode-select --install</code></li>
<li><code>brew install python3</code> 安装</li>
<li><code>pip3 install --upgrade pip setuptools</code> 升级python的包管理工具</li>
</ol>
<h3 id="Java"><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">Java</a></h3><p>Apple自己维护的Java过旧，推荐从Oracle官网下载Mac的安装包安装</p>
<h3 id="Apache">Apache</h3><p>Mac自带了Apache服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start</span><br></pre></td></tr></table></figure></p>
<h1 id="系统配置">系统配置</h1><h3 id="清理打开方式列表">清理打开方式列表</h3><p>软件版本安装卸载和多次升级之后，打开方式里可能会存在一些缓存的垃圾<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>本文只是对自己遇到的一些问题的定期维护笔记，并非高大上教程</p>
</blockquote>
<h1 id="开发环境">开发环境</h1><h3 id="Homebrew"><a href="http://brew.sh/">Homebrew</a></h3><p>类似linux下的包管理工具，能够帮助我们快速的安装第三方库和程序</p>
<p>安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[GO语言的跨平台编译]]></title>
    <link href="http://eric-is.me/2015/08/06/golang-cross-platforms/"/>
    <id>http://eric-is.me/2015/08/06/golang-cross-platforms/</id>
    <published>2015-08-06T10:09:18.000Z</published>
    <updated>2015-08-06T11:02:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="准备工作">准备工作</h1><p>我们安装完Go工具包的时候，默认只自带了当前平台的编译环境，我们需要在go目录的src目录下执行如下命令来新增一个平台的编译环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=??? GOARCH=??? ./make.bash</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>GOOS/GOARCH的可选组合如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">GOOS</th>
<th style="text-align:left">GOARCH</th>
<th style="text-align:left">Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">darwin</td>
<td style="text-align:left">386</td>
<td style="text-align:left">Mac 32位</td>
</tr>
<tr>
<td style="text-align:left">darwin</td>
<td style="text-align:left">amd64</td>
<td style="text-align:left">Mac 64位</td>
</tr>
<tr>
<td style="text-align:left">freebsd</td>
<td style="text-align:left">386</td>
<td style="text-align:left">FreeBSD 32位</td>
</tr>
<tr>
<td style="text-align:left">freebsd</td>
<td style="text-align:left">amd64</td>
<td style="text-align:left">FreeBSD 64位</td>
</tr>
<tr>
<td style="text-align:left">linux</td>
<td style="text-align:left">386</td>
<td style="text-align:left">Linux 32位</td>
</tr>
<tr>
<td style="text-align:left">linux</td>
<td style="text-align:left">amd64</td>
<td style="text-align:left">Linux 64位</td>
</tr>
<tr>
<td style="text-align:left">windows</td>
<td style="text-align:left">386</td>
<td style="text-align:left">Windows 32位</td>
</tr>
<tr>
<td style="text-align:left">windows</td>
<td style="text-align:left">amd64</td>
<td style="text-align:left">Windows 32位</td>
</tr>
</tbody>
</table>
<p>运行完成后，我们会在bin目录下看到新增的对应平台的目录</p>
<h1 id="编译项目">编译项目</h1><p>用下列命令编译对应平台的可执行文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=??? GOARCH=??? go build xxxx.go</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="准备工作">准备工作</h1><p>我们安装完Go工具包的时候，默认只自带了当前平台的编译环境，我们需要在go目录的src目录下执行如下命令来新增一个平台的编译环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=??? GOARCH=??? ./make.bash</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[A1528开启移动4G]]></title>
    <link href="http://eric-is.me/2015/08/03/iphone5s-A1528-cmcc-4g/"/>
    <id>http://eric-is.me/2015/08/03/iphone5s-A1528-cmcc-4g/</id>
    <published>2015-08-03T00:37:41.000Z</published>
    <updated>2015-08-03T00:49:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>声明: 本方法需越狱，我自己测试的是 iOS8.4 环境</p>
</blockquote>
<ol>
<li>添加源：<a href="http://apt.5dpj.com" target="_blank" rel="external">http://apt.5dpj.com</a></li>
<li>搜索安装<code>4G补丁加强版</code></li>
<li>打开「4G」开关（如果之前是开着的，可以关开一次）</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>声明: 本方法需越狱，我自己测试的是 iOS8.4 环境</p>
</blockquote>
<ol>
<li>添加源：<a href="http://apt.5dpj.com" target="_blank" rel="external">htt]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Firefox调整窗口大小时窗口黑白交替闪烁]]></title>
    <link href="http://eric-is.me/2015/07/31/firefox-resize-bug-mac/"/>
    <id>http://eric-is.me/2015/07/31/firefox-resize-bug-mac/</id>
    <published>2015-07-31T02:33:57.000Z</published>
    <updated>2015-08-03T00:34:17.000Z</updated>
    <content type="html"><![CDATA[<p>最近更新到Firefox39的时候出现调整窗口大小的时候，窗口飞快的黑白色交替的闪烁，亮瞎了我的狗眼，自从Chrome诞生以后，Firefox的质量保证真心是每况愈下啊，在Mozilla的Support找到了解决方案，分享如下:</p>
<ol>
<li>打开 about:config</li>
<li>搜索 layers.offmainthreadcomposition.enabled，双击变为false</li>
<li>重启 FireFox</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近更新到Firefox39的时候出现调整窗口大小的时候，窗口飞快的黑白色交替的闪烁，亮瞎了我的狗眼，自从Chrome诞生以后，Firefox的质量保证真心是每况愈下啊，在Mozilla的Support找到了解决方案，分享如下:</p>
<ol>
<li>打开 about:]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[临时解决Skype在Mac10.11的登录异常]]></title>
    <link href="http://eric-is.me/2015/07/27/skype-microsoft-mac-10-11/"/>
    <id>http://eric-is.me/2015/07/27/skype-microsoft-mac-10-11/</id>
    <published>2015-07-27T03:00:00.000Z</published>
    <updated>2015-07-29T08:40:41.000Z</updated>
    <content type="html"><![CDATA[<p>手贱升级到了Mac 10.11, 发现Skype不能用微软帐号登录了，报错如下：<br><br></p>
<img src="/static/skype-microsoft-mac-10-11/QQ20150724-3@2x.png">
<a id="more"></a>
<p><br><br>先求助于国内的Skype客服，发现国内的客服真心无力吐槽</p>
<ol>
<li>您系统啥版本</li>
<li>您Skype啥版本</li>
<li>您密码对吗</li>
<li>我也不知道，你问国际客服吧</li>
</ol>
<p>我嘞个去，skype.com强制重定向到国内，让我问毛个国际客服啊，无奈翻墙上到skype.com，发了个帖子，很快，Skype的开发过来表示这是个问题，又有人给出了临时解决方法：</p>
<ol>
<li>翻墙，不翻墙你啥也干不了</li>
<li>用你的微软帐号登录 <a href="https://secure.skype.com/portal/overview" target="_blank" rel="external">https://secure.skype.com/portal/overview</a></li>
<li>在页面靠下的地方找到 “Click Account settings”</li>
<li>开启 “TV and Home phone”</li>
<li>这个时候，系统会提示你，你的skype帐号是 live:xxxxx, 请为它设置个密码</li>
<li>设置密码，一路Next，你就可以用 live:xxxxx 以用户名的方式登录你的Skype了，这个帐号和你的微软帐号是绑定的，效果相同</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>手贱升级到了Mac 10.11, 发现Skype不能用微软帐号登录了，报错如下：<br><br/></p>
<img src="/static/skype-microsoft-mac-10-11/QQ20150724-3@2x.png">]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Hexo搭建博客]]></title>
    <link href="http://eric-is.me/2015/07/27/build-hexo-blog/"/>
    <id>http://eric-is.me/2015/07/27/build-hexo-blog/</id>
    <published>2015-07-27T02:00:00.000Z</published>
    <updated>2015-07-29T08:40:35.000Z</updated>
    <content type="html"><![CDATA[<p>自从Github的访问越来越困难之后，我就在寻找博客的替代方案。有人一定会说”你可以翻墙啊”之类的，但是博客这东西，真心想有个顺畅的体验，偶尔懒得写教程，发博客的链接给别人，还得先教别人翻墙么？So, 辗转好多家，<a href="www.farbox.com">Farbox</a>, <a href="www.leanote.com">Leanote</a> 我都付费体验了，效果都真心不满意。</p>
<p>这个时候看到了一个heroicyang移植的一个叫做<code>modernist</code>的Hexo的<a href="http://modernist.heroicyang.com/" target="_blank" rel="external">Demo</a>，觉得样式真心的赞</p>
<img src="/static/build-hexo-blog/QQ20150729-1@2x.png">
<hr>
<p>就下了点功夫去查了下Hexo的资料:</p>
<blockquote><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。Hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。</p>
</blockquote>
<p>静态博客啊，这不正好和Github Pages吻合的风格么，一直觉得这种东西既简洁又Geek，决定先在Mac上来一发看看效果</p>
<a id="more"></a>
<h2 id="环境准备">环境准备</h2><h4 id="NodeJS">NodeJS</h4><p>Hexo 是基于NodeJS的，所以需要先安装NodeJS</p>
<ol>
<li>去NodeJS的<a href="https://nodejs.org" target="_blank" rel="external">官网</a>下载安装包一路Next到底安装即可</li>
<li>安装完运行下<code>node -v</code>来验证下是否安装成功</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v&#10;v0.12.7</span><br></pre></td></tr></table></figure>
<h4 id="Git">Git</h4><p>Hexo的插件，主题很多依赖Git，Mac上安装Git有两个途径</p>
<ol>
<li>你装了Xcode, 那么你开启Command Line Tools 即可</li>
<li>通过 Homebrew 安装： <code>brew install git</code></li>
</ol>
<h4 id="Cnpm">Cnpm</h4><p>在天朝，从NPM源在线安装库包是一件极其坑爹的事情，幸好我们还有<a href="http://npm.taobao.org" target="_blank" rel="external">淘宝源</a><br>我们可以安装CNMP命令来专门使用这个镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<p>当然，如果你不喜欢安装CNPM，那么遇到在线下载卡壳的时候，偶尔使用<code>--registry=</code>参数给NPM临时指定下镜像也是可以的</p>
<h4 id="Hexo">Hexo</h4><p>前两项都准备好了以后，我们可以通过npm命令安装Hexo了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="搭建博客">搭建博客</h2><h4 id="初始化目录">初始化目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &#60;&#30446;&#24405;&#36335;&#24452;&#62;</span><br></pre></td></tr></table></figure>
<blockquote><p>你也可以 cd 到这个目录下然后运行 <code>hexo init</code></p>
</blockquote>
<h4 id="生成静态博客">生成静态博客</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<blockquote><p>generate 命令必须和前面的 init 命令为同一级的目录，运行成功后会在 public 目录下生成博客</p>
</blockquote>
<h4 id="本地运行">本地运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<blockquote><p>默认会在 <a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a> 开启一个服务器以供本地调试</p>
</blockquote>
<h4 id="发布到类似Github_Pages的Git服务下">发布到类似Github Pages的Git服务下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<blockquote><p>部署的具体配置下文再仔细解释</p>
</blockquote>
<h4 id="DTrace报错排除">DTrace报错排除</h4><p>在运行 hexo 命令的时候，可能会遇到DTrace报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; &#125;&#10;&#123; [Error: Cannot find module &#39;./build/default/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; &#125;&#10;&#123; [Error: Cannot find module &#39;./build/Debug/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; &#125;</span><br></pre></td></tr></table></figure>
<p>如果你遇到了这种情况，说么你的环境不支持DTrace，重新用下面命令更新hexo包即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo --no-optional --save</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="配置">配置</h2><p>默认初始化完的目录是没有配置文件的，我们可以通过命令加载一个模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch _config.yml</span><br></pre></td></tr></table></figure></p>
<p>生成的配置文件有很多属性字段，官网给出了很详细的<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">配置说明</a></p>
<hr>
<h2 id="主题">主题</h2><p>添加主题的方法是把主题文件放到themes的一个目录下，在把<code>_config.yml</code>里的内容配置成目录的名字，即可启用，不同的主题可能还有自己的一些配置说明，一般都是通过Github的README来说明的</p>
<p>我这边选用的是前文提到的<code>modernist</code>主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="写作">写作</h2><p>接下来，我们要在网站中建立第一篇文章，推荐使用 new 指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &#60;title&#62;</span><br></pre></td></tr></table></figure></p>
<p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</p>
<p>每篇文章都是一个markdown文件，在文件的开头，有一个称为 <code>Front-matter</code> 的部分来定义文章的一些属性， <code>Front-matter</code> 和正文之间用 <code>---</code>分割，大致是下面这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;title&#34;: &#34;Hello World&#34;,&#10;&#34;date&#34;: &#34;2013/7/13 20:46:25&#34;&#10;---</span><br></pre></td></tr></table></figure></p>
<p>每个标签的意义，请参看<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">文档</a></p>
<hr>
<h2 id="评论">评论</h2><p>Hexo支持 <strong>多说</strong> 和 <strong>Disqus</strong></p>
<h4 id="多说">多说</h4><p>在 _config.yml 里增加：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disqus_shortname: [&#22810;&#35828; ID]</span><br></pre></td></tr></table></figure></p>
<h4 id="Disqus">Disqus</h4><p>在 _config.yml 里增加：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duoshuo_shortname: [Disqus ID]</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="静态资源">静态资源</h2><p>从Hexo3开始，每篇文章的静态资源支持独立目录的管理，开启的方法：<br>在 _config.yml 里修改<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></p>
<p>当你设置 post_asset_folder 参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，你便可以更方便的使用资源。</p>
<p>Hexo 3.0 新增了几个插件，让你更方便的在文章内引用资源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;&#10;&#123;% asset_img slug [title] %&#125;&#10;&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="托管到_Coding-net">托管到 Coding.net</h2><p>最近正好在玩 Coding.net, 里面的演示功能支持外部访问，正好用来托管我的博客</p>
<h4 id="发布代码">发布代码</h4><p>首先创建一个项目，获取这个项目的git地址，例如 <a href="https://git.coding.net/xxx/xxx.git" target="_blank" rel="external">https://git.coding.net/xxx/xxx.git</a></p>
<p>然后我们在hexo的_config.yml里配置deploy<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:&#10;  type: git&#10;  repo: https://git.coding.net/xxx/xxx.git&#10;  branch: master</span><br></pre></td></tr></table></figure></p>
<p>这里使用到git的Deploy服务需要一个插件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>然后我们运行deploy指令，按提示输入Coding.net的用户名密码，编译出的静态页面就发布到Coding.net中了</p>
<h4 id="开启演示">开启演示</h4><p>在Coding.net的项目的演示页面下，配置一个HTML的演示工程，并配置内存和二级域名<br><img src="/static/build-hexo-blog/QQ20150729-6@2x.png"></p>
<p>成功开启后如下：<br><img src="/static/build-hexo-blog/QQ20150729-5@2x.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自从Github的访问越来越困难之后，我就在寻找博客的替代方案。有人一定会说”你可以翻墙啊”之类的，但是博客这东西，真心想有个顺畅的体验，偶尔懒得写教程，发博客的链接给别人，还得先教别人翻墙么？So, 辗转好多家，<a href="www.farbox.com">Farbox</a>, <a href="www.leanote.com">Leanote</a> 我都付费体验了，效果都真心不满意。</p>
<p>这个时候看到了一个heroicyang移植的一个叫做<code>modernist</code>的Hexo的<a href="http://modernist.heroicyang.com/">Demo</a>，觉得样式真心的赞</p>
<img src="/static/build-hexo-blog/QQ20150729-1@2x.png">
<hr>
<p>就下了点功夫去查了下Hexo的资料:</p>
<blockquote><p><a href="https://hexo.io/zh-cn/">Hexo</a>出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。Hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。</p>
</blockquote>
<p>静态博客啊，这不正好和Github Pages吻合的风格么，一直觉得这种东西既简洁又Geek，决定先在Mac上来一发看看效果</p>]]>
    
    </summary>
    
  </entry>
  
</feed>